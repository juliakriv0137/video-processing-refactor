import requests
import subprocess
import uuid
import shutil
from pathlib import Path
import logging
import yt_dlp
from dotenv import load_dotenv
import os
import git
import time
import pytesseract
from PIL import Image

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# OpenAI API Key
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

# GitHub –¥–∞–Ω–Ω—ã–µ
GITHUB_REPO = "https://github.com/juliakriv0137/video-frames.git"
GITHUB_LOCAL_PATH = Path("video-frames")
GITHUB_RAW_URL = "https://raw.githubusercontent.com/juliakriv0137/video-frames/main/video-frames/frames/"

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ yt-dlp, ffmpeg –∏ Tesseract OCR"""
    try:
        subprocess.run(["yt-dlp", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        subprocess.run(["ffmpeg", "-version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        raise RuntimeError("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å yt-dlp –∏ ffmpeg!")

    if not shutil.which("tesseract"):
        raise RuntimeError("‚ùå Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")

def download_video(url: str, output_dir: Path) -> Path:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å Instagram —á–µ—Ä–µ–∑ yt-dlp."""
    output_dir.mkdir(parents=True, exist_ok=True)
    video_path = output_dir / "downloaded_video.mp4"

    ydl_opts = {
        "outtmpl": str(video_path),
        "format": "best",
        "quiet": False,
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        return video_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        raise

def get_video_duration(video_path: Path):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ."""
    result = subprocess.run([
        "ffmpeg", "-i", str(video_path), "-hide_banner", "-f", "null", "-"
    ], stderr=subprocess.PIPE, text=True)
    
    for line in result.stderr.split("\n"):
        if "Duration" in line:
            time_str = line.split(",")[0].split(" ")[-1]
            minutes, seconds = map(float, time_str.split(":")[1:])
            return int(minutes), round(seconds)
    return None, None

def extract_frames(video_path: Path, frames_dir: Path, fps: float):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ."""
    try:
        frames_dir.mkdir(parents=True, exist_ok=True)
        subprocess.run([
            "ffmpeg", "-i", str(video_path), "-vf", f"fps=1/{fps}", f"{frames_dir}/frame_%04d.png"
        ], check=True)
        video_path.unlink()  # –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–∞–¥—Ä–æ–≤: {e}")
        raise

def upload_frames_to_github(frames_dir: Path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–¥—Ä—ã –Ω–∞ GitHub –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏."""
    if not GITHUB_LOCAL_PATH.exists():
        git.Repo.clone_from(GITHUB_REPO, GITHUB_LOCAL_PATH)

    repo = git.Repo(GITHUB_LOCAL_PATH)

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    destination = GITHUB_LOCAL_PATH / "video-frames" / "frames" / frames_dir.name
    shutil.copytree(frames_dir, destination, dirs_exist_ok=True)

    repo.git.add(A=True)
    repo.index.commit(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–¥—Ä—ã {frames_dir.name}")
    
    try:
        origin = repo.remote(name='origin')
        origin.push()
        time.sleep(3)  # –ñ–¥–µ–º, —á—Ç–æ–±—ã GitHub –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ñ–∞–π–ª—ã
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ push –≤ GitHub: {e}")
        return []

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–¥—Ä—ã
    frame_files = sorted(destination.glob("*.png"))
    frame_links = [
        f"{GITHUB_RAW_URL}{frames_dir.name}/{frame.name}" for frame in frame_files
    ]

    return frame_links

def extract_text_from_frames(frames_dir: Path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∫–∞–¥—Ä–æ–≤ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Tesseract OCR."""
    extracted_text = []
    for frame in sorted(frames_dir.glob("*.png")):
        text = pytesseract.image_to_string(Image.open(frame), lang="eng")
        if text.strip():  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            extracted_text.append(text.strip())
    return "\n".join(extracted_text) if extracted_text else "–¢–µ–∫—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω."

def analyze_video_with_gpt(frame_links):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–¥—Ä—ã –≤ GPT –∏ –ø–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ."""
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
    
    if not frame_links:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–¥—Ä—ã."

    messages = [{"role": "system", "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–¥—Ä–æ–≤ –∏ –æ–ø–∏—à–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ–æ."}]
    max_frames_per_request = 10
    all_summaries = []
    
    for i in range(0, len(frame_links), max_frames_per_request):
        batch = frame_links[i:i + max_frames_per_request]
        messages.append({"role": "user", "content": [{"type": "image_url", "image_url": {"url": url}} for url in batch]})
        
        payload = {"model": "gpt-4o", "messages": messages, "max_tokens": 1200}
        try:
            response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
            response.raise_for_status()
            all_summaries.append(response.json()["choices"][0]["message"]["content"])
            time.sleep(2)  # –ò–∑–±–µ–≥–∞–µ–º rate limit API OpenAI
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ: {e}")
            all_summaries.append("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ.")
    
    return "\n".join(all_summaries)

def analyze_video(url: str, fps: float):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–¥—Ä—ã –≤ GitHub –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö GPT."""
    task_id = str(uuid.uuid4())
    frames_dir = Path("frames") / task_id
    
    try:
        video_path = download_video(url, Path("videos") / task_id)
        minutes, seconds = get_video_duration(video_path)
        extract_frames(video_path, frames_dir, fps)
        frame_links = upload_frames_to_github(frames_dir)

        if not frame_links:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–¥—Ä—ã –Ω–∞ GitHub."}
        
        extracted_text = extract_text_from_frames(frames_dir)
        video_summary = analyze_video_with_gpt(frame_links)

        return {
            "video_duration": f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥",
            "frame_count": len(frame_links),
            "summary": video_summary,
            "text": extracted_text
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ: {e}")
        return {"error": str(e)}

if __name__ == "__main__":
    check_dependencies()
    video_url = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Instagram –∏–ª–∏ YouTube: ")
    fps = float(input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö): "))
    result = analyze_video(video_url, fps)

    print("\nüîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**")
    if "error" in result:
        print(result["error"])
    else:
        print(f"\nüé¨ –î–ª–∏–Ω–∞ –≤–∏–¥–µ–æ: {result['video_duration']}")
        print(f"üñº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤: {result['frame_count']}")
        print(f"üìú –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {result['summary']}")
        print(f"üìù –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ: {result['text']}")


